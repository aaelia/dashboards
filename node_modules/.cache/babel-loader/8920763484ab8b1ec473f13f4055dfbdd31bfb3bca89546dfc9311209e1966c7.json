{"ast":null,"code":"var _jsxFileName = \"/Users/atuhairelijah/Documents/GitHub/dashboards/src/App.js\";\nimport React from \"react\";\nimport JsonEditor from \"./JsonEditor\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Firebase JSON Editor POC\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(JsonEditor, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 6,\n    columnNumber: 5\n  }, this);\n}\n_c = App;\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import { Box, CssBaseline, Grid } from '@mui/material';\n// import Sidebar from './components/Sidebar';\n// import DashboardPanel from './components/DashboardPanel';\n// import { fetchMetrics, getPanelConfig } from './services/prometheusService';\n\n// function App() {\n//   const [selectedPanel, setSelectedPanel] = useState('overview');\n//   const [metricsData, setMetricsData] = useState({});\n//   const panels = getPanelConfig();\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const results = await Promise.all(\n//           panels.map(panel => fetchMetrics(panel.id))\n//         );\n\n//         const newData = {};\n//         results.forEach((result, index) => {\n//           newData[panels[index].id] = result;\n//         });\n\n//         setMetricsData(newData);\n//       } catch (error) {\n//         console.error('Error fetching metrics:', error);\n//       }\n//     };\n\n//     fetchData();\n//     const interval = setInterval(fetchData, 15000); // Refresh every 15 seconds\n\n//     return () => clearInterval(interval);\n//   }, [panels]);\n\n//   const renderPanels = () => {\n//     if (selectedPanel === 'overview') {\n//       return (\n//         <>\n//           {panels.map(panel => (\n//             <Grid item xs={12} md={4} key={panel.id}>\n//               <DashboardPanel\n//                 title={metricsData[panel.id]?.title || panel.title}\n//                 data={metricsData[panel.id]?.data || []}\n//                 unit={metricsData[panel.id]?.unit || panel.unit}\n//               />\n//             </Grid>\n//           ))}\n//         </>\n//       );\n//     }\n\n//     const panel = panels.find(p => p.id === selectedPanel);\n//     if (!panel) return null;\n\n//     return (\n//       <Grid item xs={12}>\n//         <DashboardPanel\n//           title={metricsData[panel.id]?.title || panel.title}\n//           data={metricsData[panel.id]?.data || []}\n//           unit={metricsData[panel.id]?.unit || panel.unit}\n//         />\n//       </Grid>\n//     );\n//   };\n\n//   return (\n//     <Box sx={{ display: 'flex' }}>\n//       <CssBaseline />\n//       <Sidebar onMenuSelect={setSelectedPanel} />\n//       <Box\n//         component=\"main\"\n//         sx={{\n//           flexGrow: 1,\n//           p: 3,\n//           width: { sm: `calc(100% - 240px)` },\n//           ml: { sm: `240px` },\n//         }}\n//       >\n//         <Grid container spacing={3}>\n//           {renderPanels()}\n//         </Grid>\n//       </Box>\n//     </Box>\n//   );\n// }\n\n// export default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","JsonEditor","jsxDEV","_jsxDEV","App","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/atuhairelijah/Documents/GitHub/dashboards/src/App.js"],"sourcesContent":["import React from \"react\";\nimport JsonEditor from \"./JsonEditor\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Firebase JSON Editor POC</h1>\n      <JsonEditor />\n    </div>\n  );\n}\n\nexport default App;\n\n// import React, { useState, useEffect } from 'react';\n// import { Box, CssBaseline, Grid } from '@mui/material';\n// import Sidebar from './components/Sidebar';\n// import DashboardPanel from './components/DashboardPanel';\n// import { fetchMetrics, getPanelConfig } from './services/prometheusService';\n\n// function App() {\n//   const [selectedPanel, setSelectedPanel] = useState('overview');\n//   const [metricsData, setMetricsData] = useState({});\n//   const panels = getPanelConfig();\n\n//   useEffect(() => {\n//     const fetchData = async () => {\n//       try {\n//         const results = await Promise.all(\n//           panels.map(panel => fetchMetrics(panel.id))\n//         );\n\n//         const newData = {};\n//         results.forEach((result, index) => {\n//           newData[panels[index].id] = result;\n//         });\n\n//         setMetricsData(newData);\n//       } catch (error) {\n//         console.error('Error fetching metrics:', error);\n//       }\n//     };\n\n//     fetchData();\n//     const interval = setInterval(fetchData, 15000); // Refresh every 15 seconds\n\n//     return () => clearInterval(interval);\n//   }, [panels]);\n\n//   const renderPanels = () => {\n//     if (selectedPanel === 'overview') {\n//       return (\n//         <>\n//           {panels.map(panel => (\n//             <Grid item xs={12} md={4} key={panel.id}>\n//               <DashboardPanel\n//                 title={metricsData[panel.id]?.title || panel.title}\n//                 data={metricsData[panel.id]?.data || []}\n//                 unit={metricsData[panel.id]?.unit || panel.unit}\n//               />\n//             </Grid>\n//           ))}\n//         </>\n//       );\n//     }\n\n//     const panel = panels.find(p => p.id === selectedPanel);\n//     if (!panel) return null;\n\n//     return (\n//       <Grid item xs={12}>\n//         <DashboardPanel\n//           title={metricsData[panel.id]?.title || panel.title}\n//           data={metricsData[panel.id]?.data || []}\n//           unit={metricsData[panel.id]?.unit || panel.unit}\n//         />\n//       </Grid>\n//     );\n//   };\n\n//   return (\n//     <Box sx={{ display: 'flex' }}>\n//       <CssBaseline />\n//       <Sidebar onMenuSelect={setSelectedPanel} />\n//       <Box\n//         component=\"main\"\n//         sx={{\n//           flexGrow: 1,\n//           p: 3,\n//           width: { sm: `calc(100% - 240px)` },\n//           ml: { sm: `240px` },\n//         }}\n//       >\n//         <Grid container spacing={3}>\n//           {renderPanels()}\n//         </Grid>\n//       </Box>\n//     </Box>\n//   );\n// }\n\n// export default App;\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,cAAc;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEtC,SAASC,GAAGA,CAAA,EAAG;EACb,oBACED,OAAA;IAAKE,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBH,OAAA;MAAAG,QAAA,EAAI;IAAwB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACjCP,OAAA,CAACF,UAAU;MAAAM,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACX,CAAC;AAEV;AAACC,EAAA,GAPQP,GAAG;AASZ,eAAeA,GAAG;;AAElB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAAA,IAAAO,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}